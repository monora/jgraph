#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// org.jgraphl.Graph<V>
	c1006 [label=<<table title="org.jgraphl.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Graph&lt;V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + forEachVertex(action : Consumer&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + stream() : Stream&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices() : Set&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + noOfVertices() : long </td></tr>
<tr><td align="left" balign="left"> + forEachEdge(action : BiConsumer&lt;V, V&gt;) </td></tr>
<tr><td align="left" balign="left"> + edgeStream() : Stream&lt;Edge&lt;V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + edges() : List&lt;Edge&lt;V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + noOfEdges() : long </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isDirected() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + getEdge(u : V, v : V) : Edge&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeSupplier() : Supplier&lt;BiFunction&lt;V, V, Edge&lt;V&gt;&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + contains(v : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(u : V, v : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(edge : Edge&lt;V&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + str() : String </td></tr>
<tr><td align="left" balign="left"> + sortedEdgeStreamToString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../Graph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// org.jgraphl.graph.ImplicitGraph<V>
	c1019 [label=<<table title="org.jgraphl.graph.ImplicitGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./ImplicitGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ImplicitGraph&lt;V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ImplicitGraph(it : Supplier&lt;Stream&lt;V&gt;&gt;, neighborIterator : Function&lt;V, Stream&lt;V&gt;&gt;, isDirected : boolean) </td></tr>
<tr><td align="left" balign="left"> + isDirected() : boolean </td></tr>
<tr><td align="left" balign="left"> + iterator() : Iterator&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + stream() : Stream&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + adjacentVertices(v : V) : Stream&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + builder() : ImplicitGraph.Builder&lt;T&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./ImplicitGraph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//org.jgraphl.graph.ImplicitGraph<V> implements org.jgraphl.Graph<V>
	c1006:p -> c1019:p [dir=back,arrowtail=empty,style=dashed];
}

