#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// org.jgraphl.IncidenceGraph<V>
	c976 [label=<<table title="org.jgraphl.IncidenceGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./IncidenceGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> IncidenceGraph&lt;V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + outEdges(u : V) : Stream&lt;Edge&lt;V&gt;&gt; </font></td></tr>
<tr><td align="left" balign="left"> + outDegree(u : V) : long </td></tr>
<tr><td align="left" balign="left"> + forEachAdjacentEdge(u : V, action : Consumer&lt;?&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="./IncidenceGraph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// org.jgraphl.BidirectionalGraph<V>
	c979 [label=<<table title="org.jgraphl.BidirectionalGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BidirectionalGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> BidirectionalGraph&lt;V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + inEdges(u : V) : Stream&lt;Edge&lt;V&gt;&gt; </font></td></tr>
<tr><td align="left" balign="left"> + inDegree(u : V) : long </td></tr>
<tr><td align="left" balign="left"> + degree(u : V) : long </td></tr>
		</table></td></tr>
		</table>>, URL="./BidirectionalGraph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// org.jgraphl.Graph<V>
	c980 [label=<<table title="org.jgraphl.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Graph&lt;V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + forEachVertex(action : Consumer&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + stream() : Stream&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices() : Set&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + noOfVertices() : long </td></tr>
<tr><td align="left" balign="left"> + forEachEdge(action : BiConsumer&lt;V, V&gt;) </td></tr>
<tr><td align="left" balign="left"> + edgeStream() : Stream&lt;Edge&lt;V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + edges() : List&lt;Edge&lt;V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + noOfEdges() : long </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isDirected() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + getEdge(u : V, v : V) : Edge&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeSupplier() : Supplier&lt;BiFunction&lt;V, V, Edge&lt;V&gt;&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + contains(v : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(u : V, v : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(edge : Edge&lt;V&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + str() : String </td></tr>
<tr><td align="left" balign="left"> + sortedEdgeStreamToString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Graph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// org.jgraphl.graph.AbstractAdjacencyGraph<V>
	c990 [label=<<table title="org.jgraphl.graph.AbstractAdjacencyGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/AbstractAdjacencyGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> AbstractAdjacencyGraph&lt;V&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AbstractAdjacencyGraph() </td></tr>
<tr><td align="left" balign="left"> + noOfVertices() : long </td></tr>
<tr><td align="left" balign="left"> + iterator() : Iterator&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + forEachAdjacentVertex(v : V, action : Consumer&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + outEdges(u : V) : Stream&lt;Edge&lt;V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + forEachAdjacentEdge(u : V, action : Consumer&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + adjacentVertices(v : V) : Stream&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + contains(v : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(u : V, v : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(edge : Edge&lt;V&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/AbstractAdjacencyGraph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//org.jgraphl.IncidenceGraph<V> implements org.jgraphl.Graph<V>
	c980:p -> c976:p [dir=back,arrowtail=empty,style=dashed];
	//org.jgraphl.BidirectionalGraph<V> implements org.jgraphl.IncidenceGraph<V>
	c976:p -> c979:p [dir=back,arrowtail=empty,style=dashed];
	//org.jgraphl.graph.AbstractAdjacencyGraph<V> implements org.jgraphl.IncidenceGraph<V>
	c976:p -> c990:p [dir=back,arrowtail=empty,style=dashed];
}

